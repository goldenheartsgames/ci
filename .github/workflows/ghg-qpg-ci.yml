name: QPG CI/CD

on:
  push:
    branches: [ develop, qa1, qa2, staging ]
  workflow_dispatch:
  workflow_call:
    inputs:
      gameName:
        required: true
        type: string
      useTPBundling:
        required: false
        type: boolean
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      SLACK_WEBHOOK:
        required: true
      NODE_AUTH_TOKEN:
        required: true
      
jobs:
  checkout:
    runs-on: ubuntu-latest
    env:
      WORKING_PATH: /home/runner/work
    steps:
      - name: Set QPG Key
        run: |
          case "${GITHUB_REF##*/}" in
            "dev") qpgKey="DEV_QPG_CONFIG"
            ;;
            "qa1") qpgKey="DEV_QPG_CONFIG"
            ;;
            "qa2") qpgKey="DEV_QPG_CONFIG"
            ;;
            "staging") qpgKey="DEV_QPG_CONFIG"
            ;;
          esac
          echo "QPG_KEY=$(echo $qpgKey)" >> $GITHUB_ENV
      - name: Test Key
        run: echo ${{ env.QPG_KEY }}
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Read secrets from AWS Secrets Manager into environment variables
#        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
#        with:
#          secrets: ${{ env.QPG_KEY }}
#          parse-json: true
#      - uses: actions/checkout@v3
#      - uses: actions/upload-artifact@v3
#        with:
#          name: ${{ inputs.gameName }}
#          path: ${{ github.workspace }}/
#  buildAtlas:
#    runs-on: ubuntu-latest
#    needs: [checkout]
#    env:
#      WORKING_PATH: /home/runner/work
#    steps:
#      - uses: actions/download-artifact@v3
#        if: ${{ inputs.useTPBundling != '' }}
#        with:
#          name: ${{ inputs.gameName }}
#          path: ${{ github.workspace }}/
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        if: ${{ inputs.useTPBundling != '' }}
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#      - name: Read secrets from AWS Secrets Manager into environment variables
#        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
#        if: ${{ inputs.useTPBundling != '' }}
#        with:
#          secrets: |
#            DEV_QPG_CONFIG
#          parse-json: true
#      - name: Install TP and dependencies
#        if: ${{ inputs.useTPBundling != '' }}
#        run: |
#          sudo apt-get update
#          curl --output /tmp/tp.deb https://www.codeandweb.com/download/texturepacker/6.0.2/TexturePacker-6.0.2.deb
#          sudo apt-get -y install libegl1-mesa libgl1-mesa-glx libfontconfig libx11-6 libxkbcommon-x11-0 /tmp/tp.deb
#          echo agree | TexturePacker --version
#          TexturePacker --activate-license ${DEV_QPG_CONFIG_TEXTURE_PACKER_KEY} ${{ github.workspace }}/raw_assets/*.tps
#      - uses: actions/upload-artifact@v3
#        if: ${{ inputs.useTPBundling != '' }}
#        with:
#          name: ${{ inputs.gameName }}
#          path: ${{ github.workspace }}
#  buildProject:
#    runs-on: ubuntu-latest
#    needs: [checkout, buildAtlas]
#    steps:
#      - uses: actions/download-artifact@v3
#        id: download
#        with:
#          name: ${{ inputs.gameName }}
#          path: ${{ env.WORKING_PATH }}
#
#      - uses: actions/setup-node@v3
#        with:
#          node-version: '16'
#          registry-url: 'https://registry.npmjs.org'
#        env:
#          NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}
#
#      - name: Install dependencies
#        working-directory: ${{ steps.download.outputs.download-path }}
#        run: npm ci
#
#      - name: Build
#        run: npm run build
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Read secrets from AWS Secrets Manager into environment variables
#        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
#        with:
#          secrets: |
#            DEV_QPG_CONFIG
#          parse-json: true
#
#      - name: Deploy game
#        run: aws s3 sync dist s3://${DEV_QPG_CONFIG_GHG_QPG_URL}/${{ inputs.gameName }} --delete
#
#      - name: Invalidate dashboard cloudfront
#        run: aws cloudfront create-invalidation --distribution-id ${DEV_QPG_CONFIG_AWS_CF_DIST_ID} --paths "/${{ inputs.gameName }}/*"
#
#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_CHANNEL: ${{ inputs.slackChannel || 'ghg-deploy' }}
#          SLACK_COLOR: ${{ job.status }}
#          SLACK_ICON: https://www.goldenheartsgames.com/favicon.ico
#          SLACK_TITLE: CI - ${{ inputs.gameName }}
#          SLACK_USERNAME: ghg-deploy
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#  cleanup:
#    runs-on: ubuntu-latest
#    needs: [buildProject]
#    steps:
#      - uses: geekyeggo/delete-artifact@v1
#        with:
#          name: ${{ inputs.gameName }}
