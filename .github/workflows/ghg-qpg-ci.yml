name: QPG CI/CD

on:
  push:
    branches: [ develop, qa1, qa2, staging ]
  workflow_dispatch:
  workflow_call:
    inputs:
      gameName:
        required: true
        type: string
      useTPBundling:
        required: false
        type: boolean
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      SLACK_WEBHOOK:
        required: true
      NODE_AUTH_TOKEN:
        required: true

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Set Artifact Name
        run: echo "artifact_name=${{ github.sha }}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - run: git config --global user.name 'GitHub'
      - run: git config --global user.email 'github@goldenheartsgames.com'
      - run: rm -rf ./rockdog
      - run: git fetch
      - run: git checkout qa2
      - run: git reset --hard
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: ${{ github.workspace }}/
          retention-days: 1
  buildAtlas:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - name: Set Artifact Name
        run: echo "artifact_name=${{ github.sha }}" >> $GITHUB_ENV
        
      - uses: actions/download-artifact@v3
        if: ${{ inputs.useTPBundling != '' }}
        with:
          name: ${{ env.artifact_name }}
          path: ${{ github.workspace }}/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ inputs.useTPBundling != '' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set QPG Key
        run: |
          case "${GITHUB_REF##*/}" in
            "develop")
              qpgKey="DEV_QPG_CONFIG"
              qpgPrefix="DEV_"
            ;;
            "qa1")
              qpgKey="QA1_QPG_CONFIG"
              qpgPrefix="QA1_"
            ;;
            "qa2")
              qpgKey="QA2_QPG_CONFIG"
              qpgPrefix="QA2_"
            ;;
            "staging")
              qpgKey="STAGING_QPG_CONFIG"
              qpgPrefix="STAGING_"
            ;;
          esac
          echo "QPG_KEY=$(echo $qpgKey)" >> $GITHUB_ENV
          echo "QPG_PREFIX=$(echo $qpgPrefix)" >> $GITHUB_ENV

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        if: ${{ inputs.useTPBundling != '' }}
        with:
          secrets: ${{ env.QPG_KEY }}
          parse-json: true

      - name: Convert variables
        run: |
          readarray -t vars < <(compgen -A variable)
          declare -p vars
          echo $vars
          for item in "${vars[@]}"
          do
              if  [[ $item == $QPG_PREFIX* ]];
              then
                var=${item/$QPG_PREFIX/}
                echo "${var}=$(echo "${!item}")" >> $GITHUB_ENV
                  echo "key: " . $item
              fi
          done          

      - name: Install TP and dependencies
        if: ${{ inputs.useTPBundling != '' }}
        run: |
          sudo apt-get update
          curl --output /tmp/tp.deb https://www.codeandweb.com/download/texturepacker/6.0.2/TexturePacker-6.0.2.deb
          sudo apt-get -y install libegl1-mesa libgl1-mesa-glx libfontconfig libx11-6 libxkbcommon-x11-0 /tmp/tp.deb
          echo agree | TexturePacker --version
          TexturePacker --activate-license ${QPG_CONFIG_QPG_TEXTURE_PACKER_KEY} ${{ github.workspace }}/raw_assets/*.tps

      - uses: actions/upload-artifact@v3
        if: ${{ inputs.useTPBundling != '' }}
        with:
          name: ${{ env.artifact_name }}
          path: ${{ github.workspace }}
          retention-days: 1
  buildProject:
    runs-on: ubuntu-latest
    needs: [checkout, buildAtlas]
    steps:
      - name: Set Artifact Name
        run: echo "artifact_name=${{ github.sha }}" >> $GITHUB_ENV
        
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: ${{ env.artifact_name }}
          path: .

      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ inputs.useTPBundling != '' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set QPG Key
        run: |
          case "${GITHUB_REF##*/}" in
            "develop")
              qpgKey="DEV_QPG_CONFIG"
              qpgPrefix="DEV_"
            ;;
            "qa1")
              qpgKey="QA1_QPG_CONFIG"
              qpgPrefix="QA1_"
            ;;
            "qa2")
              qpgKey="QA2_QPG_CONFIG"
              qpgPrefix="QA2_"
            ;;
            "staging")
              qpgKey="STAGING_QPG_CONFIG"
              qpgPrefix="STAGING_"
            ;;
          esac
          echo "QPG_KEY=$(echo $qpgKey)" >> $GITHUB_ENV
          echo "QPG_PREFIX=$(echo $qpgPrefix)" >> $GITHUB_ENV

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        if: ${{ inputs.useTPBundling != '' }}
        with:
          secrets: ${{ env.QPG_KEY }}
          parse-json: true

      - name: Convert variables
        run: |
          readarray -t vars < <(compgen -A variable)
          declare -p vars
          echo $vars
          for item in "${vars[@]}"
          do
              if  [[ $item == $QPG_PREFIX* ]];
              then
                var=${item/$QPG_PREFIX/}
                echo "${var}=$(echo "${!item}")" >> $GITHUB_ENV
                  echo "key: " . $item
              fi
          done

      - name: Install s3-deploy package
        working-directory: ${{ steps.download.outputs.download-path }}
        run: npm install s3-deploy
        
      - name: Deploy Game
        run: npx s3-deploy './dist/**' --cwd './dist/' --deleteRemoved ${{ inputs.gameName }}/** --distId ${QPG_CONFIG_QPG_AWS_CF_DIST_ID} --invalidate '/${{ inputs.gameName }}*' --region us-east-2 --bucket ${QPG_CONFIG_QPG_GHG_QPG_URL}/${{ inputs.gameName }}
        
      - name: Invalidate dashboard cloudfront
        run: aws cloudfront create-invalidation --distribution-id ${QPG_CONFIG_QPG_AWS_CF_DIST_ID} --paths "/${{ inputs.gameName }}/*"

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ inputs.slackChannel || 'ghg-deploy' }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://www.goldenheartsgames.com/favicon.ico
          SLACK_TITLE: CI - ${{ inputs.gameName }}
          SLACK_USERNAME: ghg-deploy
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  cleanup:
    runs-on: ubuntu-latest
    needs: [buildProject]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ inputs.gameName }}
