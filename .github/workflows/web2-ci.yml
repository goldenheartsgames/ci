name: Web2 CI/CD

variables:
  nodeVersion: actions/setup-node@v3
  nodeVersionName: lts/fermium

on:
  push:
    branches: [ develop, qa, GHG-5556-angular-v15-migration ]
  workflow_dispatch:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      SLACK_WEBHOOK:
        required: true
      NODE_AUTH_TOKEN:
        required: true
      WEBPAGETEST_API_KEY:
        required: true

jobs:
  checkoutAndBuild:
    runs-on: ubuntu-latest
    env:
      WORKING_PATH: /home/runner/work
    steps:
      - uses: $nodeVersion
        with:
          node-version: $nodeVersionName

      - uses: actions/checkout@v3

      - name: Generate a buildtime and client version
        run: |
          APP_SETTINGS_PATH="${GITHUB_WORKSPACE}/apps/webapp/src/environments/shared/app.settings.ts"
          echo $APP_SETTINGS_PATH
          BUILD_DATE_SEARCH_STRING="BUILD_DATE_TIME"
          BUILD_DATE_REGEX="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[\+-][0-9]{4}"
          BUILD_DATE_UTC=$(date -u +%Y-%m-%dT%H:%M:%S%z)

          if grep -Fq "$BUILD_DATE_SEARCH_STRING" $APP_SETTINGS_PATH
          then
              echo "Created new build datetime: $BUILD_DATE_UTC"
              perl -pi -e "s/BUILD_DATE_TIME/$BUILD_DATE_UTC/g" $APP_SETTINGS_PATH
          else
              echo "Modified build datetime: $BUILD_DATE_UTC"
              perl -pi -e "s/$BUILD_DATE_REGEX/$BUILD_DATE_UTC/g" $APP_SETTINGS_PATH
          fi

          CLIENT_VERSION_SEARCH_STRING="BUILD_SW_VERSION"
          CLIENT_VERSION_REGEX="[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}"
          CLIENT_VERSION=$(date -u +%y.%m.%d.%H)

          if grep -Fq "$CLIENT_VERSION_SEARCH_STRING" $APP_SETTINGS_PATH
          then
              echo "Created new swVersion: $CLIENT_VERSION"
              perl -pi -e "s/$CLIENT_VERSION_SEARCH_STRING/$CLIENT_VERSION/g" $APP_SETTINGS_PATH
          else
              echo "Modified swVersion: $CLIENT_VERSION"
              perl -pi -e "s/$CLIENT_VERSION_REGEX/$CLIENT_VERSION/g" $APP_SETTINGS_PATH
          fi

          XAUTH_SETTINGS_PATH="${GITHUB_WORKSPACE}/apps/webapp/src/environments/shared/environment.non-prod.ts"
          echo $XAUTH_SETTINGS_PATH
          XAUTH_ROUND_MS="1800000"
          echo "Setting XAUTH_ROUND_MS to $XAUTH_ROUND_MS"
          perl -pi -e "s/roundMS:.*,/roundMS: $XAUTH_ROUND_MS,/g" $XAUTH_SETTINGS_PATH

      - run: npm ci --force

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Webapp Key
        run: |
          webappConfiguration="production"
          case "${GITHUB_REF##*/}" in
            "develop")
              webappKey="DEV_WEBAPP_CONFIG"
              webappPrefix="DEV_"
              webappUrls="https://dev.goldenheartsgames.com/"
              webappConfiguration="dev"
            ;;     
            "qa")
              webappKey="STAGING_WEBAPP_CONFIG"
              webappPrefix="STAGING_"
              webappUrls="https://staging.goldenheartsgames.com/"
              webappConfiguration="staging"
            ;;
            "GHG-5556-angular-v15-migration")
              webappKey="QA2_WEBAPP_CONFIG"
              webappPrefix="QA2_"
              webappUrls="https://qa2.goldenheartsgames.com/"
              webappConfiguration="qa2"
            ;;
          esac
          echo "WEBAPP_KEY=$(echo $webappKey)" >> $GITHUB_ENV
          echo "WEBAPP_PREFIX=$(echo $webappPrefix)" >> $GITHUB_ENV
          echo "WEBAPP_URLS=$(echo $webappUrls)" >> $GITHUB_ENV
          echo "WEBAPP_CONFIGURATION=$(echo $webappConfiguration)" >> $GITHUB_ENV

          ENV_SETTINGS_PATH="${GITHUB_WORKSPACE}/apps/webapp/src/environments/environment.ts"
          ENV_WEBAPP_CONFIGURATION_PATH="${GITHUB_WORKSPACE}/apps/webapp/src/environments/environment.${webappConfiguration}.ts"
          cp $ENV_WEBAPP_CONFIGURATION_PATH $ENV_SETTINGS_PATH
          echo "Replaced ${ENV_SETTINGS_PATH} with ${ENV_WEBAPP_CONFIGURATION_PATH}"

      - run: npm run build

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: ${{ env.WEBAPP_KEY }}
          parse-json: true

      - name: Convert variables
        run: |
          readarray -t vars < <(compgen -A variable)
          declare -p vars
          echo $vars
          for item in "${vars[@]}"
          do
              if  [[ $item == $WEBAPP_PREFIX* ]];
              then
                var=${item/$WEBAPP_PREFIX/}
                echo "${var}=$(echo "${!item}")" >> $GITHUB_ENV
                echo "key: " . $item
              fi
          done

      - name: Adding third party tracking tags
        run: |
          perl -pi -e "s/GOOGLE_TAG_MANAGER_SRC_URL/https:\\/\\/www.googletagmanager.com\\/ns.html?id=GTM-KVRQVJ5\\&gtm_auth=${WEBAPP_CONFIG_GTM_AUTH}\\&gtm_preview=${GTM_PREVIEW}\\&gtm_cookies_win=x/g" ./dist/apps/web2/index.html
          perl -pi -e "s/!-- START WEBPUSH script/script/g" ./dist/apps/web2/index.html
          perl -pi -e "s/WEBPUSH_APP_SERVICE_KEY/${WEBPUSH_APP_SERVICE_KEY}/g" ./dist/apps/web2/index.html
          perl -pi -e "s/WEBPUSH_API_KEY/${WEBPUSH_API_KEY}/g" ./dist/apps/web2/index.html
          perl -pi -e "s/ END WEBPUSH --//g" ./dist/apps/web2/index.html

      - name: Deploy
        run: aws s3 sync ./dist/apps/web2/browser s3://${WEBAPP_CONFIG_WEBAPP_BUCKET} --delete --exclude "pre/*" --exclude "*/index.html"

      - name: Copy Sitemap
        run: aws s3 cp ./sitemap.xml s3://${WEBAPP_CONFIG_WEBAPP_BUCKET}/sitemap.xml --content-type "text/xml; charset=UTF-8" --content-disposition "inline"

      - name: Copy Apple File One
        run: aws s3 cp ./vendor/apple-developer-merchantid-domain-association s3://${WEBAPP_CONFIG_WEBAPP_BUCKET}/.well-known/apple-developer-merchantid-domain-association --content-type "text/html; charset=UTF-8" --content-disposition "inline"

      - name: Copy Apple File Two
        run: aws s3 cp ./vendor/apple-developer-merchantid-domain-association.txt s3://${WEBAPP_CONFIG_WEBAPP_BUCKET}/.well-known/apple-developer-merchantid-domain-association.txt --content-type "text/html; charset=UTF-8" --content-disposition "inline"

      - name: Copy WebPush File
        run: aws s3 cp ./vendor/webpush-service-worker-dev.js s3://${WEBAPP_CONFIG_WEBAPP_BUCKET}/webpush-service-worker.js --content-type "application/javascript; charset=UTF-8" --content-disposition "inline"

      - name: Invalidate
        run: aws cloudfront create-invalidation --distribution-id ${WEBAPP_CONFIG_WEBAPP_DIST_ID} --paths "/*"
